[
  {
    "objectID": "introduction.html#motivations",
    "href": "introduction.html#motivations",
    "title": "Reproducible science - motivation and basic tools",
    "section": "Motivations",
    "text": "Motivations\nReproducible science\nIn their paper @alston2021beginner address the question of science reproducibility in ecology.\nThe key aspects\nIt’s a growing trend: more and more journals require some elements of reproducibility."
  },
  {
    "objectID": "introduction.html#motivations-1",
    "href": "introduction.html#motivations-1",
    "title": "Reproducible science - motivation and basic tools",
    "section": "Motivations",
    "text": "Motivations\nPractically\nWhere is the correct version of the report?"
  },
  {
    "objectID": "introduction.html#motivations-2",
    "href": "introduction.html#motivations-2",
    "title": "Reproducible science - motivation and basic tools",
    "section": "Motivations",
    "text": "Motivations\nPractically\nAn explanation in images: vidéo by Ignasi Bartomeus."
  },
  {
    "objectID": "introduction.html#course-objective",
    "href": "introduction.html#course-objective",
    "title": "Reproducible science - motivation and basic tools",
    "section": "Course objective",
    "text": "Course objective\nIntroducing tools to facilitate step 2."
  },
  {
    "objectID": "introduction.html#overview",
    "href": "introduction.html#overview",
    "title": "Reproducible science - motivation and basic tools",
    "section": "Overview",
    "text": "Overview\nCode / paper writing\n\ngit for\n\nkeeping track of different versions of code\n\ncollective work\n\nreviewing and improving code quality\n\n\nAround the code\n\nRmarkdown, Jupyter notebooks, Quarto to bring together code, results, and analysis.\n\nvignettes in R packages\n\nR help pages\n\nsome scientific papers (Computo asks for Jupyter/Quarto submissions)\n\ndashboards …"
  },
  {
    "objectID": "introduction.html#overview-1",
    "href": "introduction.html#overview-1",
    "title": "Reproducible science - motivation and basic tools",
    "section": "Overview",
    "text": "Overview\nControlling software versions\nReproducibility also relies on stabilizing programming/library versions.\nThe container system Docker allows freezing a working software environment."
  },
  {
    "objectID": "introduction.html#the-winning-trio-of-reproducible-research-with-r",
    "href": "introduction.html#the-winning-trio-of-reproducible-research-with-r",
    "title": "Reproducible science - motivation and basic tools",
    "section": "The winning trio of reproducible research with R",
    "text": "The winning trio of reproducible research with R\n\ngit code versionning\nRmarkdown markup language\n\nDocker Controlling software version (last 2 sessions with Theo Fabien)"
  },
  {
    "objectID": "git1.html#what-is-it",
    "href": "git1.html#what-is-it",
    "title": "Basics in git, working alone",
    "section": "What is it?",
    "text": "What is it?\n\nDeveloped by Linus Torvalds: “I’m an egotistical bastard, and I name all my projects after myself. First Linux, now git.”\n\n\n\nGit is a version control system (the most widely used today).\nIt allows tracking all changes made to code since its creation.\nGit is incredibly efficient."
  },
  {
    "objectID": "git1.html#cloning-an-existing-reprository",
    "href": "git1.html#cloning-an-existing-reprository",
    "title": "Basics in git, working alone",
    "section": "Cloning an existing reprository",
    "text": "Cloning an existing reprository\nThis means copy locally on your computer the content of a repository which means\n\ncopy the actual code and text contents\ncopy the history of all changes\n\nBefore using Git, we need basic bash commands"
  },
  {
    "objectID": "git1.html#first-element---navigating-using-bash-command",
    "href": "git1.html#first-element---navigating-using-bash-command",
    "title": "Basics in git, working alone",
    "section": "First element - navigating using bash command",
    "text": "First element - navigating using bash command\nNavigating Directories in the Terminal / Git Bash\n\nChecking where you are\n\n\n$ pwd\n/home/marie/projects\n\n\nListing files\n\n\nls -l #→ long listing\nls -a #→ include hidden files\n\n\nMoving between directories\n\n\n\n\nAction\nLinux/macOS/Git Bash\nWindows Command Prompt\n\n\n\n\nGo to a directory\ncd folder_name\ncd folder_name\n\n\nGo up one level\ncd ..\ncd ..\n\n\nGo to home\ncd ~\ncd %USERPROFILE%\n\n\nAbsolute path\ncd /path/to/folder\ncd C:\\path\\to\\folder"
  },
  {
    "objectID": "git1.html#first-element---navigating-using-bash-command-1",
    "href": "git1.html#first-element---navigating-using-bash-command-1",
    "title": "Basics in git, working alone",
    "section": "First element - navigating using bash command",
    "text": "First element - navigating using bash command\n\nCreate a directory\n\n\nmkdir my_git_dir\n\n\nRemoving files or directory\n\n\nrm my_file\nrmdir my_dir #remove an empty dir\nrm -rf my_dir #remove a directeory and everything inside ! Careful\n\n\nQuick tips\n\nUse Tab for autocomplete paths and filenames.\nPaths on Git Bash use /, even on Windows (/c/Users/...)."
  },
  {
    "objectID": "git1.html#exercise",
    "href": "git1.html#exercise",
    "title": "Basics in git, working alone",
    "section": "Exercise",
    "text": "Exercise\n\nGo to your home directory (/home/loginin Linux, probably somethin like C:/Users/yourusername in Windows)\nCreate a directory named git, where you will store all your git projects\nJump within this directory\nlist the files contained in this directory\nCreate a test_dir directory\nJump outside the git directory\nRemove the git directory and everything it contains\nCreate a directory named git, where you will store all your git projects"
  },
  {
    "objectID": "git1.html#cloning-an-existing-reprository-1",
    "href": "git1.html#cloning-an-existing-reprository-1",
    "title": "Basics in git, working alone",
    "section": "Cloning an existing reprository",
    "text": "Cloning an existing reprository\nGo to your git Directory and write\n\ngit clone git@github.com:MarieEtienne/stats-reminders.git\n\nWhat is happening ?\n\nls\ncd stats-reminders\nls\n\nWhere to find this magical address to clone\nNavigate to the repository you want to clone On the main page, click on the “Code” green button, be sure to select SSH and copy paste the address."
  },
  {
    "objectID": "git1.html#reviewing-the-code-development",
    "href": "git1.html#reviewing-the-code-development",
    "title": "Basics in git, working alone",
    "section": "Reviewing the code development",
    "text": "Reviewing the code development\n\ngit log\ngit log --oneline\ngitk"
  },
  {
    "objectID": "git1.html#forking-an-existing-repository",
    "href": "git1.html#forking-an-existing-repository",
    "title": "Basics in git, working alone",
    "section": "Forking an existing repository",
    "text": "Forking an existing repository\nWhat is forking?\nForking creates your own copy of someone else’s repository in your GitHub account. This lets you experiment with changes without affecting the original project. How to fork a repo:\nHow\nNavigate to the repository you want to fork on GitHub Click the “Fork” button in the top-right corner of the repository page Choose where to fork it - usually to your personal account Wait a moment - GitHub will create the copy in your account\nWhat happens next:\nYou’ll have a complete copy of the repo in your GitHub account You can clone this forked version to your local machine using git clone Make changes, commit them, and push back to your fork If you want to contribute back to the original project, you can create a pull request\nKey points\nYour fork is independent of the original repo You have full control over your forked version The original repo remains unchanged unless you submit a pull request that gets accepted You can sync your fork with the original repo later if it gets updated\nThis workflow is essential for contributing to open-source projects or collaborating on code when you don’t have direct write access to the original repository."
  },
  {
    "objectID": "git1.html#exercise-1",
    "href": "git1.html#exercise-1",
    "title": "Basics in git, working alone",
    "section": "Exercise",
    "text": "Exercise\n\nRemove the stats-reminder directory and its content\nFork https://github.com/MarieEtienne/stats-reminders on your personnal GitHub account\nclone your version of stats-reminder\nShow the history of this file"
  },
  {
    "objectID": "git1.html#your-first-commit",
    "href": "git1.html#your-first-commit",
    "title": "Basics in git, working alone",
    "section": "Your first commit",
    "text": "Your first commit\n\nOpen the file Penguins_chapter.qmd and add your name and the list of authors, then save your file.\n\n\n\nType the command git log in the console.\n\n\n\n\nEnter the following commands:\n\n\ngit status # project status\ngit diff\n\n\n\n\nType the command git add penguins.Rmd, then repeat the previous commands.\nType the command git commit -m \"Added an author\", and once again check the project status.\nCheck the project on Github\nType the command git push\", and once again check the project on Github"
  },
  {
    "objectID": "git2.html#commit-tree",
    "href": "git2.html#commit-tree",
    "title": "Git : Working collaboratively",
    "section": "Commit tree",
    "text": "Commit tree\n\nGraphical representationExercise\n\n\n\n\n\nWrite the commit tree of MarieEtienne/stats-reminder repo with the actual commit number\n\ngit clone .... ## cloning the repo\ngit ...  ## print history\n\nRemark: To show only the last 3 commits you can use\n\ngit log -n 3"
  },
  {
    "objectID": "git2.html#a-first-commit",
    "href": "git2.html#a-first-commit",
    "title": "Git : Working collaboratively",
    "section": "A first commit",
    "text": "A first commit\n\nOpen the file Penguins_chapter.qmd and add your name and the list of authors, then save your file.\n\n\ngit status # project status\ngit diff\n\n\nType the command git add Penguins_chapter.qmd, then repeat the previous commands.\nType the command git commit -m \"Change title\", and once again check the project status.\nDraw the commit tree."
  },
  {
    "objectID": "git2.html#process-overview",
    "href": "git2.html#process-overview",
    "title": "Git : Working collaboratively",
    "section": "Process overview",
    "text": "Process overview\n\nThe snapshot analogy\n\nIn the working directory, let’s try different poses (the version of the project in the working directory)\nWhen satisfied by the pose of one guy, ask him stop moving (Staging area)\nWhen satisfied with the whole scene, take the photo (Commit in the local repo)"
  },
  {
    "objectID": "git2.html#share-your-progress-with-your-co-workers",
    "href": "git2.html#share-your-progress-with-your-co-workers",
    "title": "Git : Working collaboratively",
    "section": "Share your progress with your co workers",
    "text": "Share your progress with your co workers\nThe current version of the project is indeed recorded in the version control system, but you are the only ones who know it.\nYou may want to share these changes to the remote repository from which we started.\n\nTo view the differences with the remote repository, use git diff origin/master.\nTo send our changes, , use git push.\n\n\nGraphicallyTheoretically after the pushProcess overviewBut\n\n\n\n\n\n\n\n\n\n\n\n\nMost of view receive errors message like\n\n\nTo github.com:MarieEtienne/stats-reminders.git\n ! [rejected]        master -&gt; master (fetch first)\nerror: failed to push some refs to 'github.com:MarieEtienne/stats-reminders.git'\nhint: Updates were rejected because the remote contains work that you do not\nhint: have locally. This is usually caused by another repository pushing to\nhint: the same ref. If you want to integrate the remote changes, use\nhint: 'git pull' before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n, why ?\n\nDraw the commit tree."
  },
  {
    "objectID": "git2.html#share-your-progress-with-your-co-workers-1",
    "href": "git2.html#share-your-progress-with-your-co-workers-1",
    "title": "Git : Working collaboratively",
    "section": "Share your progress with your co workers",
    "text": "Share your progress with your co workers\n\nGraphicallyThe theorySolvingPractically (easy but dirty)ExampleProcess overviewGoal minimising conflicts\n\n\n\n\n\n\nBe sure that all your changes have been committed\nwhen works are diverged, you can have different attitudes. We go for the simple one for now and we need to specify this config for git\n\n\ngit config pull.rebase false\n\n\nRetrieve the last version of the project on the server: git pull origin master\nThis might highlights conflicts: In case of conflict, you receive a very nasty message.\n\n\nAuto-merging README.md\nCONFLICT (content): Merge conflict in README.md\nAutomatic merge failed; fix conflicts and then commit the result.\n\n\nShare the merged version on the server\n\n\n\n\nSolving conflicts implies choosing and You must resolve the conflict\n\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nIt will also served as sandbox during the lectures. Therefore the git history might be a bit fuzy.\n\n=======\nIt will be used as sandbox during the lectures. Don't be scared by the messy git tree!\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dfdf5995ade6e47899531a99e5947e719da86020\n\nPortion between &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD and ======= is your local version, while part between =======and &gt;&gt;&gt;&gt;&gt;&gt;&gt; dfdf5995ade6e47899531a99e5947e719da86020 is the version available at commit with hash dfdf5995ade6e47899531a99e5947e719da86020.\n\n\n\ngit pull origin master # retrieve the laste version on the server and try to merge with yours\ngit status # see the conflicted files\n## revise each conflicted file to remove conflicts\ngit add any files with solved conflicts\ngit commit -m \"Merge conflicts solved\"\ngit push\n\nProblem: the merge commit is not very readable in the development process. But one step at a time\n\n\n\nChange someting in your local version of Penguins_chapter.qmd,\ngit add, commit, pull …..\nSolve conflicts\n`git push’\n\nProblem: Too much time spent at solving conflicts. We need another to minimize conflilcts\n\n\n\n\n\nT1 \nT2 \n\nT3 \nAssociate trees with actions\n\n\nOne branch for one task\n\n\n\nWorking in parralel and merging from time to time\n\nGraphicallyCreateShareMergeExercise - 1Exercise - 2\n\n\n\n\nWorking in parallel:\n\n\nMerging test within master: \n\n\n\nCreat a local branch and navigating between different branches\n\ngit branch mpe_test_branch # create a branch\ngit branch -a # list the branch and indicates on which you are sitting\ngit switch  mpe_test_branch # switch/jump on mpe_test_branch\ngit branch -a \ngit switch master\ngit branch -d mpe_test_branch # deletes the branch\n\n\n\n\nCreate your own branch and make some changes, add and commit them and now trying to push\n\n\ngit push origin YOUR_BRANCH_NAME\ngit switch master #go back on the master branch\ngit branch -a #list all the branchs and show on which you are sitting\n\nGo on Github and look !\n\n\n\nCreate a second test branch test_branch2 and make some changes\nWe want to incorprate change make in test_branch2 in your personnal branch\n\n\ngit switch YOUR_BRANCH_NAME\ngit merge test_branch2 #merging the commits of test_branch2 in the branch you are sitting\n## look at your files\n\n\n\n\nCreates your own test_branch from the master branch and go on this branch\nRemove Penguins_chapter.qmd from the versioning system git rm Penguins_chapter.qmd\nlist the content your directory\nCommit your changes in your branch\nSwitch to the master branch\nList the contents of your directory\nDelete your test_branch git branch -d NAME_OF_YOUR_BRANCH\n\n\n\n\nCreate a branch and switch to this branch\nCreate a qmd file, name `Row_id.qmd”, id being the order of your row, 1 is the closes to the board.\nWork by team, (a team = a row), to crate and solve conflicts\n\n\n\n\n\nWriting a clean history - a proper way to merge\n\nStep 1: Fetch Latest HistoryStep 2: Rebase Your BranchStep 3: Merge (Fast-Forward)Summary\n\n\n\ngit fetch origin\n\n\nUpdates your local references to remote branches\nDoes not change your working directory\nPrepares you to rebase onto the latest master\n\n\n\nSuppose you are on your feature branch:\n\ngit switch my_branch_to_be_shared\ngit rebase origin/master \n\nRe-applies your commits on top of the latest master Lets you resolve conflicts now, instead of later during merge\n\n\nOnce rebase was successful:\n\ngit switch master\ngit merge my_branch_to_be_shared\n\nSince history is linear, this is a fast-forward merge\nNo extra merge commits\nHistory stays clean and easy to read\n\n\n\ngit fetch: update local info about remote\ngit rebase origin/master: reapply work on top of latest master\ngit merge: integrate cleanly\nyou can delete your branch one your work is included\n\n\n\n\n\n\nNavigate from one version to another\n\n\n\nGoing back in time : restor version – checkout\nTo go back to a previous specific version, use the checkout command\nOpen the files Penguins_chapter.qmd and execute\n\ngit log --oneline\ngit checkout A_specific_hash_version_number\n\nThe current working version of Penguins_chapter.qmd is in the state of commit A_specific_hash_version_number\nYou can branch from this moment if you want to\nGo back to the latest version on master by\n\ngit checkout master\n\nEverything is back to normal!\nThat’s the Git Magic\n\n\nTo suppress a local commit (not present on the remote repo)\n\nRemove the file Penguins_chapter.qmd, and commit this change\n\n\ngit log --oneline\ngit reset --hard The_previous_commit_number\ngit log --oneline\n\n\nBe very very very careful, it is a destructive process. All information regarding your previous commit is lost.\nIt’s a very dangerous way of living with Git, an unfortunate removal of a commit present on the remote server can break the commit trees for all your coworkers and you won’t have friends anymore.\n\n\n\nHow to suppress a commit shared on the remote repo\n\nRemove the file Penguins_chapter.qmd and commit this modification.\n\nYou can “suppress” this commit by applying the opposit! That’s what you do by\n\ngit log --oneline\ngit revert commit_number_to_revert\ngit log --oneline\n\nThis becomes more difficult with dirty merge commits, so try to keep a clean history\n\n\n\nConclusion\n\n\n\nLast few words\n\nGit is a standard control version system in industry AND research for version control (whether you use it with Github or not),\nBeing proficient with Git requires to use it as much as possible: The more problems you have, the more you learn\nGo back to the documentation as much as needed\nBy no means, Git is an alternative to a proper documented code (in R you might want to use package like formatR, styleR and document it with roxygen)\n\n\n\nEvaluation\n\nA short quizz on November 5th, to check your understanding of git behaviours command, errors and message. It could be explaining in words the development of a project by looking at a project history, explaining the actions to be taken according to one mean git message, explaining the purpose of one command. No need to learn commands, regulard practice before this date should be enough.\nStats reminder project\n\nI will be looking at the qality of the commits\nThe use of PR\nRespect the checks\nReview Other’s work\n\nFor next session: 3 teams\n\nthe linear model team\nthe factorial analysis team\nThe Differential equation team\n\nWithin each team, 3 specific mthods within the gen,eral team, illusrated by an ecological example."
  },
  {
    "objectID": "git2.html#one-branch-for-one-task",
    "href": "git2.html#one-branch-for-one-task",
    "title": "Git : Working collaboratively",
    "section": "One branch for one task",
    "text": "One branch for one task"
  },
  {
    "objectID": "git2.html#writing-a-clean-history---a-proper-way-to-merge",
    "href": "git2.html#writing-a-clean-history---a-proper-way-to-merge",
    "title": "Git : Working collaboratively",
    "section": "Writing a clean history - a proper way to merge",
    "text": "Writing a clean history - a proper way to merge\n\nStep 1: Fetch Latest HistoryStep 2: Rebase Your BranchStep 3: Merge (Fast-Forward)Summary\n\n\n\ngit fetch origin\n\n\nUpdates your local references to remote branches\nDoes not change your working directory\nPrepares you to rebase onto the latest master\n\n\n\nSuppose you are on your feature branch:\n\ngit switch my_branch_to_be_shared\ngit rebase origin/master \n\nRe-applies your commits on top of the latest master Lets you resolve conflicts now, instead of later during merge\n\n\nOnce rebase was successful:\n\ngit switch master\ngit merge my_branch_to_be_shared\n\nSince history is linear, this is a fast-forward merge\nNo extra merge commits\nHistory stays clean and easy to read\n\n\n\ngit fetch: update local info about remote\ngit rebase origin/master: reapply work on top of latest master\ngit merge: integrate cleanly\nyou can delete your branch one your work is included"
  },
  {
    "objectID": "git2.html#going-back-in-time-restor-version-checkout",
    "href": "git2.html#going-back-in-time-restor-version-checkout",
    "title": "Git : Working collaboratively",
    "section": "Going back in time : restor version – checkout",
    "text": "Going back in time : restor version – checkout\nTo go back to a previous specific version, use the checkout command\nOpen the files Penguins_chapter.qmd and execute\n\ngit log --oneline\ngit checkout A_specific_hash_version_number\n\nThe current working version of Penguins_chapter.qmd is in the state of commit A_specific_hash_version_number\nYou can branch from this moment if you want to\nGo back to the latest version on master by\n\ngit checkout master\n\nEverything is back to normal!\nThat’s the Git Magic"
  },
  {
    "objectID": "git2.html#to-suppress-a-local-commit-not-present-on-the-remote-repo",
    "href": "git2.html#to-suppress-a-local-commit-not-present-on-the-remote-repo",
    "title": "Git : Working collaboratively",
    "section": "To suppress a local commit (not present on the remote repo)",
    "text": "To suppress a local commit (not present on the remote repo)\n\nRemove the file Penguins_chapter.qmd, and commit this change\n\n\ngit log --oneline\ngit reset --hard The_previous_commit_number\ngit log --oneline\n\n\nBe very very very careful, it is a destructive process. All information regarding your previous commit is lost.\nIt’s a very dangerous way of living with Git, an unfortunate removal of a commit present on the remote server can break the commit trees for all your coworkers and you won’t have friends anymore."
  },
  {
    "objectID": "git2.html#how-to-suppress-a-commit-shared-on-the-remote-repo",
    "href": "git2.html#how-to-suppress-a-commit-shared-on-the-remote-repo",
    "title": "Git : Working collaboratively",
    "section": "How to suppress a commit shared on the remote repo",
    "text": "How to suppress a commit shared on the remote repo\n\nRemove the file Penguins_chapter.qmd and commit this modification.\n\nYou can “suppress” this commit by applying the opposit! That’s what you do by\n\ngit log --oneline\ngit revert commit_number_to_revert\ngit log --oneline\n\nThis becomes more difficult with dirty merge commits, so try to keep a clean history"
  },
  {
    "objectID": "git2.html#last-few-words",
    "href": "git2.html#last-few-words",
    "title": "Git : Working collaboratively",
    "section": "Last few words",
    "text": "Last few words\n\nGit is a standard control version system in industry AND research for version control (whether you use it with Github or not),\nBeing proficient with Git requires to use it as much as possible: The more problems you have, the more you learn\nGo back to the documentation as much as needed\nBy no means, Git is an alternative to a proper documented code (in R you might want to use package like formatR, styleR and document it with roxygen)"
  },
  {
    "objectID": "git2.html#evaluation",
    "href": "git2.html#evaluation",
    "title": "Git : Working collaboratively",
    "section": "Evaluation",
    "text": "Evaluation\n\nA short quizz on November 5th, to check your understanding of git behaviours command, errors and message. It could be explaining in words the development of a project by looking at a project history, explaining the actions to be taken according to one mean git message, explaining the purpose of one command. No need to learn commands, regulard practice before this date should be enough.\nStats reminder project\n\nI will be looking at the qality of the commits\nThe use of PR\nRespect the checks\nReview Other’s work\n\nFor next session: 3 teams\n\nthe linear model team\nthe factorial analysis team\nThe Differential equation team\n\nWithin each team, 3 specific mthods within the gen,eral team, illusrated by an ecological example."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OCR – Online Collaborative Resources",
    "section": "",
    "text": "Welcome\nThe course OCR (Online Collaborative Resources) introduces tools and practices for reproducible and collaborative science.\nIt is designed for students who want to learn how to:\n\nOrganize their work for transparency and reproducibility\n\nUse version control systems such as Git\n\nCollaborate effectively on shared projects\n\nDocument analyses and results in a reproducible way\n\n\n\n\nCourse content\nDuring this course, you will explore:\n\nIntroduction\nWhy reproducibility and collaboration matter in science, and the main challenges researchers face.\nSetting up your framework\nInstalling and configuring the software environment (Git, Quarto, etc.).\nGit basics (working alone)\nUnderstanding repositories, commits, and tracking changes in your own projects.\nWorking collaboratively\nUsing branches, pull requests, and collaborative workflows on shared repositories.\nFinal assignment\nApplying what you learned in a collaborative project.\n\n\n\n\nFinal Assignment\nThe final project of this course is to collaboratively produce a set of reminders about basic statistical concepts.\n\nEach student will write a short note (max 1 page) on a chosen concept (e.g., mean, variance, regression, probability).\n\nNotes will be written in Quarto (.qmd) files inside a shared repository.\n\nYou will practice Git collaboration by creating branches, making commits, and opening pull requests.\n\nYou are also requested to review others’ production and provide useful comments, accet or not pull requests\nAt the end, all contributions will be merged into a collective resource: a mini-encyclopedia of statistics reminders.\n\nThis project will allow you to experience real-world collaborative workflows while reinforcing key concepts in statistics.\n\n\n\nHow to use this website\nUse the top menu to navigate through the course:\n\nIntroduction – motivations and context\n\nSet up your framework – installing tools\n\nBasics in git, working alone – first steps with Git\n\nWorking collaboratively – branches, merges, pull requests\n\nFinal assignment – description of the project and instructions\n\nStats Reminders – where all student contributions will appear"
  },
  {
    "objectID": "setup.html#create-a-github-account",
    "href": "setup.html#create-a-github-account",
    "title": "Set up your framework",
    "section": "1. Create a GitHub Account",
    "text": "1. Create a GitHub Account\n\nGo to https://github.com\n\nClick Sign up\n\nChoose a username, email, and password\n\nVerify your account by email\n\n(Optional) Install GitHub Desktop if you prefer a GUI"
  },
  {
    "objectID": "setup.html#install-git-linux",
    "href": "setup.html#install-git-linux",
    "title": "Set up your framework",
    "section": "2. Install Git (Linux)",
    "text": "2. Install Git (Linux)\nOn most Linux distributions, Git is available from the package manager.\n\nOn Debian/Ubuntu:\n\nCheck if Git is available if not\nsudo apt update\nsudo apt install git"
  },
  {
    "objectID": "setup.html#install-git-macos",
    "href": "setup.html#install-git-macos",
    "title": "Set up your framework",
    "section": "2. Install Git (macOS)",
    "text": "2. Install Git (macOS)\nCheck if Git is available if not\nbrew install git\nCheck installation with:\ngit --version"
  },
  {
    "objectID": "setup.html#install-git-windows",
    "href": "setup.html#install-git-windows",
    "title": "Set up your framework",
    "section": "2. Install Git (Windows)",
    "text": "2. Install Git (Windows)\nWindows users should install Git for Windows, which includes Git Bash.\n\nDownload from https://git-scm.com/download/win\nRun the installer and keep the default options\nAfter installation, open Git Bash from the Start menu\nVerify installation:\n\ngit --version"
  },
  {
    "objectID": "setup.html#generate-an-ssh-key-linux-macos",
    "href": "setup.html#generate-an-ssh-key-linux-macos",
    "title": "Set up your framework",
    "section": "3. Generate an SSH key (Linux & macOS)",
    "text": "3. Generate an SSH key (Linux & macOS)\nOpen a terminal and type:\n# create a new ssh key RSA (2048 bits) with no passphrase\nssh-keygen -t rsa -b 2048 -C \"your_email@example.com\"\n\n# press enter to accept default file location (~/.ssh/id_rsa)\n# press enter to use am empty passphrase"
  },
  {
    "objectID": "setup.html#generate-an-ssh-key-windows-git-bash",
    "href": "setup.html#generate-an-ssh-key-windows-git-bash",
    "title": "Set up your framework",
    "section": "3. Generate an SSH key (Windows, Git Bash)",
    "text": "3. Generate an SSH key (Windows, Git Bash)\n\nOpen Git Bash\nRun:\n\n# create a new ssh key RSA (2048 bits) with no passphrase\nssh-keygen -t rsa -b 2048 -C \"your_email@example.com\"\n\n# press enter to accept default file location (~/.ssh/id_rsa)\n# press enter to use am empty passphrase \n\nKeys are saved by default in:\n\nC:\\Users\\&lt;YourUser&gt;\\.ssh\\id_rsa"
  },
  {
    "objectID": "setup.html#add-the-ssh-key-to-github",
    "href": "setup.html#add-the-ssh-key-to-github",
    "title": "Set up your framework",
    "section": "4. Add the SSH key to GitHub",
    "text": "4. Add the SSH key to GitHub\n\nCopy the public key:\n\ncat ~/.ssh/id_rsa.pub\n(or open id_rsa.pub in a text editor on Windows)\n\nGo to GitHub → Settings → SSH and GPG keys\nClick New SSH key\nPaste the key, give it a name (e.g. My laptop), save"
  },
  {
    "objectID": "setup.html#test-the-connection",
    "href": "setup.html#test-the-connection",
    "title": "Set up your framework",
    "section": "5. Test the connection",
    "text": "5. Test the connection\nRun:\nssh -T git@github.com\nIf successful, you’ll see:\nHi username! You've successfully authenticated, but GitHub does not provide shell access."
  },
  {
    "objectID": "setup.html#configuration",
    "href": "setup.html#configuration",
    "title": "Set up your framework",
    "section": "6. Configuration",
    "text": "6. Configuration\nThe purpose of Git is to keep tracks of different versions of a project and their authors.\nTo do so, you need to be authenticated. Before using, specify your name\nThe first use after installation\n\ngit config --global user.email \"your email\"\ngit config --global user.name \"your name\"`\ngit config -l # check"
  }
]