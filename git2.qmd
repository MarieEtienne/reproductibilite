---
title: "Git : Working collaboratively"
author: Marie-Pierre Etienne
date: '2025/09/10 (updated: `r Sys.Date()`)'
institute: https://github.com/MarieEtienne/reproductibilite
execute: 
  freeze: false
editor: 
  markdown: 
    wrap: 72
css: mpe_pres_revealjs.css
format:
  revealjs: 
    theme: [default, custom.scss]
    width: 1050
    margin: 0.05
    slide-number: true
    show-slide-number: print
    menu:
      useTextContentForMissingTitles: false
---



```{r setup, include = FALSE,  eval = TRUE}
library(RefManageR)
BibOptions(check.entries = FALSE,
           bib.style = "authoryear",
           cite.style = "alphabetic",
           style = "markdown",
           hyperlink = FALSE,
           dashed = FALSE)
myBib <- ReadBib('OCR.bib', check = FALSE)
```

# Brief Reminder of Basic Git

## Commit tree 


::: panel-tabset

### Graphical representation 

<img src="resources/figs/git1.svg" width="900" height = "300" alt = "simple branche"></img>

### Exercise

Write the commit tree of `MarieEtienne/stats-reminder` repo with the actual commit number

```{bash}
#| echo: true
#| eval: false
git clone .... ## cloning the repo
git ...  ## print history
```

Remark: To show only the last 3 commits you can use

```{bash}
#| echo: true
#| eval: false
git log -n 3
```

:::



## A first commit

* Open the file `Penguins_chapter.qmd` and add your name and the list of authors, then save your file.

```{bash}
#| echo: true
#| eval: false
git status # project status
git diff
```

* Type the command `git add Penguins_chapter.qmd`, then repeat the previous commands.

* Type the command `git commit -m "Change title"`, and once again check the project status.

* Draw the commit tree.

. . .

<img src="resources/figs/git2.svg" width="800" height = "250" alt = "simple branche"></img>





## Process overview

<img src="resources/figs/Vision_globale_git_step1.png" width="800" height = "300" alt = "bilan1"></img>



### The snapshot analogy

- In the working directory, let's try different poses (the version of the project in the working directory)

- When satisfied by the pose of one guy, ask him stop moving (Staging area)

- When satisfied with the whole scene, take the photo (Commit in the local repo)



## Share your progress with your co workers

The current version of the project is indeed recorded in the version control system, but you are the only ones who know it.

You may want to share these changes to the remote repository from which we started.

* To view the differences with the remote repository, use `git diff origin/master`.

* To send our changes, , use `git push`.


::: panel-tabset

### Graphically

<img src="resources/figs/git3.svg" width="600" height = "200" alt = "bilan1"></img>

### Theoretically after the push

<img src="resources/figs/git3_bis.svg" width="600" height = "200" alt = "bilan1"></img>

### Process overview

<img src="resources/figs/Vision_globale_git_step2.png" width="800" height = "300" alt = "bilan1"></img>


### But

* Most of view receive errors message like
```{bash conflict}
#| echo: true
#| eval: false
To github.com:MarieEtienne/stats-reminders.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'github.com:MarieEtienne/stats-reminders.git'
hint: Updates were rejected because the remote contains work that you do not
hint: have locally. This is usually caused by another repository pushing to
hint: the same ref. If you want to integrate the remote changes, use
hint: 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```
, why ?

* Draw the commit tree.

:::



## Share your progress with your co workers

::: panel-tabset

### Graphically

<img src="resources/figs/git4.svg" width="600" height = "200" alt = "bilan1"></img>

### The theory

* Be sure that all  your changes have been committed

* when works are diverged, you can have different attitudes. We go for the simple one for now and we need to specify this config for git

```{bash git_config_merge}
#| echo: true
#| eval: false
git config pull.rebase false
```

* Retrieve the last version of the project on the server: `git pull origin master`

* This might highlights conflicts:  In case of conflict, you receive a very nasty message.

```{bash git_conflict_msg}
#| echo: true
#| eval: false
Auto-merging README.md
CONFLICT (content): Merge conflict in README.md
Automatic merge failed; fix conflicts and then commit the result.
```

* Share the merged version on the server

### Solving 
*
Solving conflicts implies choosing and You must resolve the conflict

```{bash git_conflict_resolve}
#| echo: true
#| eval: false
<<<<<<< HEAD
It will also served as sandbox during the lectures. Therefore the git history might be a bit fuzy.

=======
It will be used as sandbox during the lectures. Don't be scared by the messy git tree!
>>>>>>> dfdf5995ade6e47899531a99e5947e719da86020
```

Portion between  `<<<<<<< HEAD` and `=======` is your local version,  while part between `=======`and `>>>>>>> dfdf5995ade6e47899531a99e5947e719da86020` is the version available at commit with hash dfdf5995ade6e47899531a99e5947e719da86020.


### Practically (easy but dirty)

```{bash}
#| echo: true
#| eval: false
git pull origin master # retrieve the laste version on the server and try to merge with yours
git status # see the conflicted files
## revise each conflicted file to remove conflicts
git add any files with solved conflicts
git commit -m "Merge conflicts solved"
git push
```

[Problem]{.care}: the merge commit is not very readable in the development process. But one step at a time

### Example

* Change someting in your local version of `Penguins_chapter.qmd`,

* `git add, commit, pull` .....

* Solve conflicts

* `git push'

[Problem]{.care}: Too much time spent at solving conflicts. We need another to minimize conflilcts

<img src="resources/figs/git5.svg" width="600" height = "200" alt = "bilan1"></img>

### Process overview

::::: columns
:::: {.column width="48%"}

[T1]{.care}
<img src="resources/figs/git6.svg" width="600" height = "200" alt = "bilan1"></img>


[T2]{.care}
<img src="resources/figs/git5.svg" width="600" height = "200" alt = "bilan1"></img>

::::

:::: {.column width="48%"}
[T3]{.care}
<img src="resources/figs/git4.svg" width="600" height = "200" alt = "bilan1"></img>

::::


[Associate trees with actions]{.care}

:::



## One branch for one task

### Goal minimising conflicts

Working in parralel and merging from time to time


::: panel-tabset

### Graphically

::::: columns
:::: {.column width="48%"}

Working in parallel: 

<img src="resources/figs/git7.svg" width="600" height = "200" alt = "bilan1"></img>



::::


:::: {.column width="48%"}


Merging test within master: 
<img src="resources/figs/git8.svg" width="600" height = "200" alt = "bilan1"></img>

::::


:::



### Create 

Creat a local branch and navigating between different branches

```{bash}
#| echo: true
#| eval: false
git branch mpe_test_branch # create a branch
git branch -a # list the branch and indicates on which you are sitting
git switch  mpe_test_branch # switch/jump on mpe_test_branch
git branch -a 
git switch master
git branch -d mpe_test_branch # deletes the branch
```


### Share 

* Create your own branch and make some changes, add and commit them and now trying to push


```{bash}
#| echo: true
#| eval: false
git push origin YOUR_BRANCH_NAME
git switch master #go back on the master branch
git branch -a #list all the branchs and show on which you are sitting
```

Go on Github and look !

### Merge 

* Create a second test branch `test_branch2` and make some changes

* We want to incorprate change make in test_branch2 in your personnal branch


```{bash}
#| echo: true
#| eval: false
git switch YOUR_BRANCH_NAME
git merge test_branch2 #merging the commits of test_branch2 in the branch you are sitting
## look at your files
```

### Exercise - 1

* Creates your own test_branch from the master branch  and go on this branch

* Remove  `Penguins_chapter.qmd` from the versioning system `git rm Penguins_chapter.qmd`

* list the content your directory

* Commit your changes in your branch

* Switch to the master branch

* List the contents of your directory

* Delete your test_branch `git branch -d NAME_OF_YOUR_BRANCH`

### Exercise - 2

* Create a branch and switch to this branch

* Create a qmd file, name `Row_id.qmd", id being the order of your row, 1 is the closes to the board.

* Work by team, (a team = a row), to crate and solve conflicts


:::





## Writing a clean history - a proper way to merge

::: panel-tabset

### Step 1: Fetch Latest History

```{bash}
#| echo: true
#| eval: false
git fetch origin
```

* Updates your local references to remote branches

* Does not change your working directory

* Prepares you to rebase onto the latest master

### Step 2: Rebase Your Branch

Suppose you are on your feature branch:

```{bash}
#| echo: true
#| eval: false
git switch my_branch_to_be_shared
git rebase origin/master 
```

Re-applies your commits on top of the latest master
Lets you resolve conflicts now, instead of later during merge


### Step 3: Merge (Fast-Forward)

Once rebase was successful:

```{bash}
#| echo: true
#| eval: false
git switch master
git merge my_branch_to_be_shared
```

Since history is linear, this is a fast-forward merge

No extra merge commits

History stays clean and easy to read

### Summary

* git fetch: update local info about remote

* git rebase origin/master: reapply work on top of latest master

* git merge: integrate cleanly
    
* you can delete your branch one your work is included
  
:::


# Navigate from one version to another 

## Going back in time : restor  version -- checkout 

To go back to a previous specific version, use the `checkout`  command

Open the files `Penguins_chapter.qmd` and execute

```{bash git_checkout}
#| echo: true
#| eval: false
git log --oneline
git checkout A_specific_hash_version_number
```

The current working version of  `Penguins_chapter.qmd` is in the state of commit `A_specific_hash_version_number`


You can branch from this moment if you want to 

Go back to the latest version on master by


```{bash git_checkout2}
#| echo: true
#| eval: false
git checkout master
```

Everything is back to normal!


**That's the Git Magic**


## To suppress a local commit (not present on the remote repo)

* Remove the file `Penguins_chapter.qmd`, and commit this change

```{bash git_checkout_suppress}
#| echo: true
#| eval: false
git log --oneline
git reset --hard The_previous_commit_number
git log --oneline
```

. . .

Be very very very careful, it is a destructive process. All information regarding your previous commit is lost.

It's a very dangerous way of living with Git, an unfortunate removal of a commit present on the remote server can break the commit trees for all your coworkers and you won't have friends anymore.


## How to suppress a commit shared on the remote repo

* Remove the file  `Penguins_chapter.qmd` and commit this modification.

You can "suppress" this commit by applying the opposit! That's what you do by

```{bash git_suppress2}
#| echo: true
#| eval: false
git log --oneline
git revert commit_number_to_revert
git log --oneline
```

This becomes more difficult with dirty merge commits, so try to keep a clean history



# Conclusion 

## Last few words

* Git is a standard control version system in industry AND research for version control (whether you use it with Github or not),

* Being proficient with Git requires to use it as much as possible: The more problems you have, the more you learn

* Go back to the documentation as much as needed 

* By no means, Git is an alternative to a proper documented code (in R you might want to use package like `formatR`, `styleR` and document it with `roxygen`)

## Evaluation

* A short quizz on November 5th, to check your understanding of git behaviours command, errors and message. It could be explaining in words the development of a project by looking at a project history, explaining the actions to be taken according to one mean git message, explaining the purpose of one command. No need to learn commands, regulard practice before this date should be enough.

* Stats reminder project 
  * I will be looking at the qality of the commits
  * The use of PR
  * Respect the checks
  * Review Other's work 
  
* For next session: 3 teams
  - the linear model team
  - the factorial analysis team
  - The Differential equation team
  
  Within each team, 3 specific mthods within the gen,eral team, illusrated by an ecological example.
  



<!-- --- -->

<!-- # Some help other than Claude.ai and ChatGPT -->

<!-- ## Resources -->

<!-- * [The Git Book](https://git-scm.com/book/en/v2) -->
<!-- * [Atlassian tutorial](https://www.atlassian.com/git/tutorials/what-is-version-control) -->

<!-- ## Cheat sheet -->

<!-- [Git Cheat sheet](https://education.github.com/git-cheat-sheet-education.pdf) -->


<!-- ## Tobe used as a Sandbox -->

<!-- [Learning Git Demo](https://learngitbranching.js.org/?locale=fr_FR&NODEMO=) -->


<!-- ## Références -->

<!-- ```{r refs, echo=FALSE, results="asis", eval = TRUE, cache = FALSE} -->
<!-- PrintBibliography(myBib) -->
<!-- ``` -->

