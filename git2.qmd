---
title: "Git : Working collaboratively"
author: Marie-Pierre Etienne
date: '2025/09/10 (updated: `r Sys.Date()`)'
institute: https://github.com/MarieEtienne/reproductibilite
execute: 
  freeze: false
editor: 
  markdown: 
    wrap: 72
css: mpe_pres_revealjs.css
format:
  revealjs: 
    theme: [default, custom.scss]
    width: 1050
    margin: 0.05
    slide-number: true
    show-slide-number: print
    menu:
      useTextContentForMissingTitles: false
---



```{r setup, include = FALSE,  eval = TRUE}
library(RefManageR)
BibOptions(check.entries = FALSE,
           bib.style = "authoryear",
           cite.style = "alphabetic",
           style = "markdown",
           hyperlink = FALSE,
           dashed = FALSE)
myBib <- ReadBib('OCR.bib', check = FALSE)
```

# Brief Reminder of Basic Git

## Commit tree 


::: panel-tabset

### Graphical representation 

<img src="resources/figs/git1.svg" width="900" height = "300" alt = "simple branche"></img>

### Exercise

Write the commit tree of `MarieEtienne/stats-reminder` repo with the actual commit number

```{bash}
#| echo: true
#| eval: false
git clone .... ## cloning the repo
git ...  ## print history
```

Remark: To show only the last 3 commits you can use

```{bash}
#| echo: true
#| eval: false
git log -n 3
```

:::



## A first commit

* Open the file `Penguins_chapter.qmd` and add your name and the list of authors, then save your file.

```{bash}
#| echo: true
#| eval: false
git status # project status
git diff
```

* Type the command `git add Penguins_chapter.qmd`, then repeat the previous commands.

* Type the command `git commit -m "Change title"`, and once again check the project status.

* Draw the commit tree.

. . .

<img src="resources/figs/git2.svg" width="800" height = "250" alt = "simple branche"></img>





## Process overview

<img src="resources/figs/Vision_globale_git_step1.png" width="800" height = "300" alt = "bilan1"></img>



### The snapshot analogy

- In the working directory, let's try different poses (the version of the project in the working directory)

- When satisfied by the pose of one guy, ask him stop moving (Staging area)

- When satisfied with the whole scene, take the photo (Commit in the local repo)



## Share your progress with your co workers

The current version of the project is indeed recorded in the version control system, but you are the only ones who know it.

You may want to share these changes to the remote repository from which we started.

* To view the differences with the remote repository, use `git diff origin/master`.

* To send our changes, , use `git push`.


::: panel-tabset

### Graphically

<img src="resources/figs/git3.svg" width="600" height = "200" alt = "bilan1"></img>

### Theoretically after the push

<img src="resources/figs/git3_bis.svg" width="600" height = "200" alt = "bilan1"></img>

### Process overview

<img src="resources/figs/Vision_globale_git_step2.png" width="800" height = "300" alt = "bilan1"></img>


### But

* Most of view receive errors message like
```{bash conflict}
#| echo: true
#| eval: false
To github.com:MarieEtienne/stats-reminders.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'github.com:MarieEtienne/stats-reminders.git'
hint: Updates were rejected because the remote contains work that you do not
hint: have locally. This is usually caused by another repository pushing to
hint: the same ref. If you want to integrate the remote changes, use
hint: 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```
, why ?

* Draw the commit tree.

:::



## Share your progress with your co workers

::: panel-tabset

### Graphically

<img src="resources/figs/git4.svg" width="600" height = "200" alt = "bilan1"></img>

### The theory

* Be sure that all  your changes have been committed

* when works are diverged, you can have different attitudes. We go for the simple one for now and we need to specify this config for git

```{bash git_config_merge}
#| echo: true
#| eval: false
git config pull.rebase false
```

* Retrieve the last version of the project on the server: `git pull origin master`

* This might highlights conflicts:  In case of conflict, you receive a very nasty message.

```{bash git_conflict_msg}
#| echo: true
#| eval: false
Auto-merging README.md
CONFLICT (content): Merge conflict in README.md
Automatic merge failed; fix conflicts and then commit the result.
```

* Share the merged version on the server

### Solving conflicts = deciding

You must resolve the conflict

```{bash git_conflict_resolve}
#| echo: true
#| eval: false
<<<<<<< HEAD
It will also served as sandbox during the lectures. Therefore the git history might be a bit fuzy.

=======
It will be used as sandbox during the lectures. Don't be scared by the messy git tree!
>>>>>>> dfdf5995ade6e47899531a99e5947e719da86020
```

Portion between  `<<<<<<< HEAD` and `=======` is your local version,  while part between `=======`and `>>>>>>> dfdf5995ade6e47899531a99e5947e719da86020` is the version available at commit with hash dfdf5995ade6e47899531a99e5947e719da86020.


### In practice, the easy dirty way

```{bash}
#| echo: true
#| eval: false
git pull origin master # retrieve the laste version on the server and try to merge with yours
git status # see the conflicted files
## revise each conflicted file to remove conflicts
git add any files with solved conflicts
git commit -m "Merge conflicts solved"
git push
```

[Problem]{.care}: the merge commit is not very readable in the development process. But one step at a time

### Example

* Change someting in your local version of `Penguins_chapter.qmd`,

* `git add, commit, pull` .....

* Solve conflicts

* `git push'

[Problem]{.care}: Too much time spent at solving conflicts. We need another to minimize conflilcts

<img src="resources/figs/git5.svg" width="600" height = "200" alt = "bilan1"></img>

### Process overview

Before the pull:

<img src="resources/figs/git4.svg" width="600" height = "200" alt = "bilan1"></img>


After conflicts solved:
<img src="resources/figs/git5.svg" width="600" height = "200" alt = "bilan1"></img>


After the push:
<img src="resources/figs/git6.svg" width="600" height = "200" alt = "bilan1"></img>

:::



## One branch for one task

### Goal minimising conflicts

Working in parralel and merging from time to time


::: panel-tabset

### Graphically


After the push:
<img src="resources/figs/git7.svg" width="600" height = "200" alt = "bilan1"></img>


### Practically 

* Create a local branch

```{bash}
#| echo: true
#| eval: false
git checkout -b mpe_test_branch
```

Make some changes, add and commit them and now trying to push


```{bash}
#| echo: true
#| eval: false
git push origin mpe_test_branch
git switch master #go back on the master branch
```

Go on Giuthub and look !


### Exercise

* Creates your own test_branch from the master branch  and go on this branch

* Remove  `Penguins_chapter.qmd` from the versioning system


:::

<!-- ### Best way -->


<!-- ```{bash} -->
<!-- #| echo: true -->
<!-- #| eval: false -->
<!-- git fetch origin # retrieve the latest version on the server but do no merge -->
<!-- git rebase origin/master  # put your work on the top of the commit tree of the local copy o origin master -->
<!-- ## solve conflicts and  -->
<!-- git rebase --continue -->
<!-- ``` -->






<!-- * We edit the file to choose the correct version, then `git add, commit, push` -->


<!-- ** Please  take some time to produce conflicts and solve it ** -->


<!-- --- -->
<!-- template: contribute -->

<!-- ## Working together: Graphical tree overview -->

<!-- <img src="resources/figs/Vision_globale_git_step3.png" width="800" height = "300" alt = "bilan1"></img> -->




<!-- --- -->
<!-- template: contribute -->

<!-- ## Working together: less share, less pain  -->

<!-- To limit conflicts, conduct tests without interfering with others, there is the concept of *branching*. -->

<!-- You work independantly for a while and merge from time to time. -->
<!-- -- -->

<!-- <img src="resources/figs/git7.svg" width="800" height = "600" alt = "bilan1"></img> -->


<!-- --- -->
<!-- template: contribute -->

<!-- ## Working together: branches  practically speaking -->


<!-- * Create your branch -->

<!-- ```{r git_branch, eval = FALSE } -->
<!-- git branch -a -->
<!-- git branch test -->
<!-- git branch -a -->
<!-- ``` -->

<!-- * To jump on a branch -->

<!-- ```{r git_switch, eval = FALSE } -->
<!-- git switch test -->
<!-- git branch -a -->
<!-- ``` -->

<!-- Let's make whatever changes you like and then commit. -->
<!-- when you return to the master branch, you will find your project just as you left it before branching. -->

<!-- ** Take a moment to try** -->

<!-- --- -->
<!-- template: contribute -->

<!-- ## Working together: branches  practically speaking -->

<!-- * Let's create your own branch  and jump on it  `git branch` (`git branch -a` to have the remotes branches also). -->

<!-- The stared branch is the one we currently sit on. -->

<!-- * Please remove `penguins.Rmd ` then register this change -->

<!-- ```{r illustration_branche, eval = FALSE}  -->
<!-- rm penguins.Rmd # to remove the file -->
<!-- git status -->
<!-- git add penguins.Rmd # add the changes aka it's deletion -- ok it's weird -->
<!-- git commit -m "Removing penguins.Rmd" -->
<!-- ls #list the content of the working directory -->
<!-- ``` -->

<!-- * Jump back on the master branch `git switch master` and list the contents of your working directory.  -->

<!-- -- -->

<!-- You may want to suppress an old unuseful branch with  -->

<!-- ```{r delete_branche, eval = FALSE}  -->
<!-- git branch  -d test  -->
<!-- ``` -->

<!-- -- -->

<!-- As the changes stored in this branch have not been pushed on the remote repo, you will lose every changes if you delete the branch, -->

<!-- The vigilant Git system is worried about us. Are we not on the verge of losing important work? -->

<!-- We reassure it by letting it know that we know exactly what we are doing by using the  `-D` option -->

<!-- ```{r delete_branche_force, eval = FALSE}  -->
<!-- git branch  -D test  -->
<!-- ``` -->

<!-- --- -->
<!-- template: contribute -->


<!-- ## Working together: incorporate the changes made in another branch -- merge -->

<!-- * Create a branch dev and switch to this branch. -->

<!-- * Add a nice chart to penguins.Rmd and then incorporate your changes into the project on the dev branch. -->

<!-- * Push your work to the remote repository (look at Git's instructions on git push options) (optional for now but generally useful). -->

<!-- * Switch to the master branch and type the command git merge dev. You have integrated the changes made in dev into the master branch. -->

<!-- * Draw the commit tree in this case. -->

<!-- --- -->
<!-- name: navigate -->

<!-- # Navigate from one version to another -->

<!-- --- -->
<!-- template: navigate -->

<!-- ## Go back to a previous version -- checkout -->

<!-- To go back to a previous specific version, use the `checkout`  command -->

<!-- Open the files `penguins.Rmd` and execute -->

<!-- ```{r git_checkout, eval = FALSE} -->
<!-- git log --oneline -->
<!-- git checkout A_specific_hash_version_number -->
<!-- ``` -->

<!-- The current working version of  `penguins.Rmd` is in the state of commit `A_specific_hash_version_number` -->

<!-- Go back to the lates version on master by  -->

<!-- -- -->

<!-- ```{r git_checkout_2, eval = FALSE} -->
<!-- git checkout master -->
<!-- ``` -->

<!-- Everything is back to normal! -->


<!-- ** That's the Git Magic" -->


<!-- --- -->
<!-- template: navigate -->

<!-- ## To suppress a local commit (not present on the remote repo) -->

<!-- * Remove the file `penguins.Rmd`, and commit this change -->

<!-- ```{r git_checkout_suppress, eval = FALSE} -->
<!-- git log --oneline -->
<!-- git reset --hard The_previous_commit_number -->
<!-- git log --oneline -->
<!-- ``` -->

<!-- -- -->

<!-- Be very very very careful, it is a destructive process. All information regarding your previous commit is lost. -->

<!-- It's a very dangerous way of living with Git, an unfortunate removal of a commit present on the remote server can break the commit trees for all your coworkers and you won't have friends anymore.  -->


<!-- --- -->
<!-- template: navigate -->

<!-- ## How to suppress a commit shared on the remote repo -->


<!-- * Remove the file  `penguins.Rmd` and commit this modification. -->

<!-- You can "suppress" this commit by applying the opposit! That's what you do by  -->

<!-- ```{r git_checkout_suppress_2, eval = FALSE} -->
<!-- git log --oneline -->
<!-- git revert commit_number_to_revert -->
<!-- git log --oneline -->
<!-- ``` -->

<!-- --- -->
<!-- template: gitintro -->

<!-- ## Practice -->

<!-- within your team, divide and conquer to produce -->

<!-- * a short text to present the Palmer Penguins dataset, -->
<!-- * insigthful plots of the Palmer penguins dataset, -->
<!-- * a statistical analysis to deceide wheter or not the average body mass in the same whatever species you consider, -->

<!-- Good Practice : -->

<!-- Every one works on its own develoment branch and shae with others when he's ready -->


<!-- --- -->
<!-- # If we have time  -->

<!-- `git rebase` -->

<!-- `git cherry pick` -->



<!-- --- -->

<!-- # Last few words -->

<!-- * Git is a standard control version system in industry AND research for version control (wheter you use it with Github or not), -->

<!-- * Being proficient with Git requires to use it as much as possible: The more problems you have, the more you learn -->

<!-- * Go back to the documentation as much as needed -->

<!-- * By no means, Git is an alternative to a proper documented code (in R you might want to use package like `formatR`, `styleR` and document it with `roxygen`) -->





<!-- --- -->

<!-- # Some help other than Claude.ai and ChatGPT -->

<!-- ## Resources -->

<!-- * [The Git Book](https://git-scm.com/book/en/v2) -->
<!-- * [Atlassian tutorial](https://www.atlassian.com/git/tutorials/what-is-version-control) -->

<!-- ## Cheat sheet -->

<!-- [Git Cheat sheet](https://education.github.com/git-cheat-sheet-education.pdf) -->


<!-- ## Tobe used as a Sandbox -->

<!-- [Learning Git Demo](https://learngitbranching.js.org/?locale=fr_FR&NODEMO=) -->


<!-- ## Références -->

<!-- ```{r refs, echo=FALSE, results="asis", eval = TRUE, cache = FALSE} -->
<!-- PrintBibliography(myBib) -->
<!-- ``` -->

